# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Release Library

on:
  push:
    tags:
      - 'v[0-9]+.*'

jobs:
  create_release:
    permissions:
      contents: write
    name: Create release
    runs-on: ubuntu-latest
    # Note this. We are going to use that in further jobs.
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        continue-on-error: true
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Checkout repository (lib-multiplatform-proj)
        uses: actions/checkout@v4
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ./include/*.hpp

  release_assets:
    name: Release assets
    permissions:
      contents: write
    needs: create_release # we need to know the upload URL
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC  compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl, clang_ios_os, clang_ios_sim]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            library_name_extension: "ubuntu_g++_x64"
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            library_name_extension: "ubuntu_clang_x64"
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            library_name_extension: "windows_cl_x64"
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            apple_env: macos
            library_name_extension: "macos_clang_x64-arm64"
          - os: macos-latest
            c_compiler: clang_ios_os
            cpp_compiler: clang++
            ios_platform: OS
            apple_env: ios
            library_name_extension: "ios_os_clang_arm64"
          - os: macos-latest
            c_compiler: clang_ios_sim
            ios_platform: SIM
            cpp_compiler: clang++
            apple_env: ios_sim
            library_name_extension: "ios_sim_clang_x64-arm64"
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: clang_ios_os
          - os: ubuntu-latest
            c_compiler: clang_ios_sim
          - os: windows-latest
            c_compiler: clang_ios_os
          - os: windows-latest
            c_compiler: clang_ios_sim

    steps:
    - name: Checkout repository (lib-multiplatform-proj)
      uses: actions/checkout@v4

    - name: Check out libtiff (iOS)
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: ${{ (matrix.c_compiler == 'clang_ios_sim' ||  matrix.c_compiler == 'clang_ios_os') && matrix.os == 'macos-latest' }}
      uses: actions/checkout@master
      with:
        path: ./.libtiff
        repository: viscan-de/lib-multiplatform-tiff

    - name: Build libtiff (iOS)
      if: ${{ (matrix.c_compiler == 'clang_ios_sim' ||  matrix.c_compiler == 'clang_ios_os') && matrix.os == 'macos-latest' }}
      run: |
        cd .libtiff
        make platform=${{ matrix.apple_env }}
        ln -s ./.libtiff/${{ matrix.apple_env }}/dependencies ../libtiff

    - name: Check out vcpkg (Windows)
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: ${{ matrix.os == 'windows-latest' }}
      uses: actions/checkout@master
      with:
        path: ./.vcpkg
        repository: microsoft/vcpkg
        
    - name: Build libtiff
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        cd .vcpkg && bootstrap-vcpkg.bat
        vcpkg install tiff

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: ${{ matrix.c_compiler != 'clang_ios_sim' &&  matrix.c_compiler != 'clang_ios_os' && matrix.os != 'windows-latest' }}
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_BUILDENV_GITHUB=ON
        -DBUILD_APPS=OFF
        -DBUILD_PROJSYNC=OFF 
        -DBUILD_SHARED_LIBS=OFF
        -S ${{ github.workspace }}
  
    - name: Configure CMake for iOS
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: ${{ (matrix.c_compiler == 'clang_ios_sim' ||  matrix.c_compiler == 'clang_ios_os') && matrix.os == 'macos-latest' }}
      run: >
        cmake -GXcode -B ${{ steps.strings.outputs.build-output-dir }} 
        -DCMAKE_TOOLCHAIN_FILE=./ios.cmake -DIOS_PLATFORM=${{ matrix.ios_platform }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_BUILDENV_GITHUB=ON
        -DBUILD_APPS=OFF 
        -DBUILD_PROJSYNC=OFF 
        -DBUILD_SHARED_LIBS=OFF
        -DTIFF_LIBRARY=./libtiff/lib 
        -DTIFF_INCLUDE_DIR=./libtiff/include
        -S ${{ github.workspace }}

    - name: Configure CMake for Windows
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: ${{ matrix.os == 'windows-latest' }}
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }} 
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_BUILDENV_GITHUB=ON
        -DBUILD_APPS=OFF 
        -DBUILD_PROJSYNC=OFF 
        -DBUILD_SHARED_LIBS=OFF
        -DTIFF_LIBRARY="./.vcpkg/installed/x64-windows/lib"
        -DTIFF_INCLUDE_DIR="./.vcpkg/installed/x64-windows/include"
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -t proj
        ls -Roh ${{ steps.strings.outputs.build-output-dir }}/../*
        cd ${{ steps.strings.outputs.build-output-dir }}
        cd lib/${{ matrix.build_type }}
        for f in * ; do mv "$f" ${{ matrix.library_name_extension }}_"$f" ; done

#    - name: Test
#      working-directory: ${{ steps.strings.outputs.build-output-dir }}
#      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
#      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#      run: ctest --build-config ${{ matrix.build_type }} --output-on-failure

#    - name: Generate coverage report (GCC)
#      uses: threeal/gcovr-action@v1.0.0
#      if: ${{ (matrix.os != 'macos-latest' &&  matrix.c_compiler == 'gcc') && (matrix.c_compiler != 'clang_ios_sim' &&  matrix.c_compiler != 'clang_ios_os') }}
#      with:
#        fail-under-line: 90
#        excludes: |
#          test/*
#          sample/*
#          build/*

#    - name: Generate coverage report (CLANG)
#      uses: threeal/gcovr-action@v1.0.0
#      if: ${{ (matrix.os != 'macos-latest' &&  matrix.c_compiler == 'clang') && (matrix.c_compiler != 'clang_ios_sim' &&  matrix.c_compiler != 'clang_ios_os') }}
#      with:
#        fail-under-line: 90
#        gcov-executable: llvm-cov gcov
#        excludes: |
#          test/*
#          sample/*
#          build/*

    - run: ls -Roh ${{ steps.strings.outputs.build-output-dir }}/../*

    #- name: Upload release assets
    #  uses: actions/upload-release-asset@v1
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #    upload_url: ${{ needs.create_release.outputs.upload_url }}
    #    # This is how it will be named on the release page. Put hatever name
    #    # you like, remember that they need to be different for each platform.
    #    # You can choose any build matrix parameters. For Rust I use the
    #    # target triple.
    #    asset_name: libCoordTrafo-${{ matrix.config.os }}.a
    #    # The path to the file you want to upload.
    #    asset_path: ${{ steps.strings.outputs.build-output-dir }}/lib/Linux/libCoordTrafo.a
    #    # probably you will need to change it, but most likely you are
    #    # uploading a binary file
    #    asset_content_type: application/octet-stream
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          ${{ steps.strings.outputs.build-output-dir-slashes }}/lib/${{ matrix.build_type }}/*

#  trigger_update:
#    name: Trigger framework update
#    needs: release_assets
#    runs-on: ubuntu-latest
#    steps:
#    - name: Repository Dispatch
#      uses: peter-evans/repository-dispatch@v2
#      with:
#        token: ${{ secrets.TRIGGER_FW_UPDATE }}
#        repository: viscan-de/framework-ios-coordinate-transformation
#        event-type: libCoordTrafoRelease
